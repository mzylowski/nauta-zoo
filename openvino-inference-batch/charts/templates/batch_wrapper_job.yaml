apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-batch-wrapper
  labels:
    app: {{ template "name" . }}
    chart: {{ template "chart_version" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    runName: {{ .Release.Name }}
    batchType: wrapper
spec:
  template:
    metadata:
      annotations:
        buildID: {{ .Values.buildID }}
        scheduling.k8s.io/group-name: {{ .Release.Name }}-podgroup
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
        runName: {{ .Release.Name }}
        batchType: wrapper
    spec:
      schedulerName: kube-batch
      containers:
        - name: {{ .Chart.Name }}
          image: "127.0.0.1:{{ .Values.registryPort }}/nauta/batch-inference:v1.0.0"
          command: ["python3.6", "main.py"]
          args: ["--input_dir_path", "{{ .Values.dataPath }}", "--output_dir_path", "{{ .Values.outputPath }}", "--input_format", "{{ .Values.inputFormat }}" ]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: TENSORFLOW_MODEL_SERVER_SVC_NAME
              value: "{{ .Release.Name }}:{{ .Values.containerPort }}"
            - name: RUN_NAME
              value: {{ .Release.Name }}
            - name: LOG_LEVEL
              value: "{{ .Values.logLevel }}"
          volumeMounts:
            - name: input-home
              mountPath: /mnt/input/home
              readOnly: True
            - name: input-public
              mountPath: /mnt/input/root
              readOnly: True
            - name: output-home
              mountPath: /mnt/output/home
            - name: output-public
              mountPath: /mnt/output/root
            - name: output-home
              mountPath: /mnt/output/experiment
              subPath: {{ .Values.experimentName }}
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: {{ default .Values.batch_wrapper_resources.requests.cpu .Values.wrapper_cpu}}
              memory: {{ default .Values.batch_wrapper_resources.requests.memory .Values.wrapper_memory }}
      restartPolicy: Never
      volumes:
        - name: input-home
          persistentVolumeClaim:
            claimName: input-home
        - name: input-public
          persistentVolumeClaim:
            claimName: input-public
        - name: output-home
          persistentVolumeClaim:
            claimName: output-home
        - name: output-public
          persistentVolumeClaim:
            claimName: output-public
      initContainers:
        - name: init-inference-pod
          image: "{{ .Values.image.clusterRepository }}"
          command: ['mkdir', '-p', "/mnt/output/home/{{ .Values.experimentName }}"]
          volumeMounts:
            - name: output-home
              mountPath: /mnt/output/home
  backoffLimit: 0
