apiVersion: kubeflow.org/v1alpha2
kind: TFJob
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "name" . }}
    chart: {{ template "chart_version" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    runName: {{ .Release.Name }}
spec:
  ttlSecondsAfterFinishing: 60
  cleanPodPolicy: None # Setting cleanPodPolicy to None, so parameter servers will not be terminated by tf-operator
  tfReplicaSpecs:
    Worker:
      replicas: {{ .Values.workersCount }}
      restartPolicy: Never
      template:
        metadata:
          annotations:
            buildID: {{ .Values.buildID }}
          labels:
            app: {{ template "name" . }}
            release: {{ .Release.Name }}
            runName: {{ .Release.Name }}
        spec:
          schedulerName: kube-batch
          containers:
            - name: tensorflow
              image: "{{ .Values.image.clusterRepository }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["python"]
              args: [
                "main.py",
                {{ range .Values.commandline.args }}
                "{{.}}",
                {{ end }}
              ]
              env:
              - name: RUN_NAME
                value: {{ .Release.Name }}
{{ if .Values.env }}
{{ toYaml .Values.env | indent 14 }}
{{ end }}
              ports:
                - containerPort: {{ .Values.TensorBoardPort }}
                  name: "tensorboard"
                - containerPort: {{ .Values.TensorIPythonPort }}
                  name: "ipython"
              volumeMounts:
                - name: input-home
                  mountPath: /mnt/input/home
                  readOnly: True
                - name: input-public
                  mountPath: /mnt/input/root
                  readOnly: True
                - name: output-home
                  mountPath: /mnt/output/home
                - name: output-public
                  mountPath: /mnt/output/root
                  readOnly: True
                - name: output-public
                  mountPath: /mnt/output/root/public
                  subPath: public
                - name: input-public
                  mountPath: /mnt/input/root/public
                  subPath: public
                - name: output-home
                  mountPath: /mnt/output/experiment
                  subPath: {{ .Values.experimentName }}
                - name: shared-data
                  mountPath: /pod-data
              securityContext:
                privileged: true
              resources:
                requests:
                  cpu: {{ default .Values.worker_resources.requests.cpu .Values.worker_cpu}}
                  memory: {{ default .Values.worker_resources.requests.memory .Values.worker_memory }}
                limits:
                  cpu: {{ default .Values.worker_resources.limits.cpu .Values.worker_cpu }}
                  memory: {{ default .Values.worker_resources.limits.memory .Values.worker_memory }}
            - name: sidecar
              image: "127.0.0.1:{{ .Values.registryPort }}/nauta/tfjob-multinode-sidecar:1.0.0"
              imagePullPolicy: Always
              env:
                - name: MY_POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: LOGGING_LEVEL
                  value: {{ .Values.sidecarLoggingLevel }}
              volumeMounts:
                - name: shared-data
                  mountPath: /pod-data
              resources:
                requests:
                  cpu: {{ default .Values.sidecar_resources.requests.cpu .Values.sidecar_cpu }}
                  memory: {{ default .Values.sidecar_resources.requests.memory .Values.sidecar_memory }}
                limits:
                  cpu: {{ default .Values.sidecar_resources.limits.cpu .Values.sidecar_cpu }}
                  memory: {{ default .Values.sidecar_resources.limits.memory .Values.sidecar_memory }}
          volumes:
            - name: input-home
              persistentVolumeClaim:
                claimName: input-home
            - name: input-public
              persistentVolumeClaim:
                claimName: input-public
            - name: output-home
              persistentVolumeClaim:
                claimName: output-home
            - name: output-public
              persistentVolumeClaim:
                claimName: output-public
            - name: shared-data
              emptyDir: {}
          initContainers:
            - name: init-experiment-pod
              image: "{{ .Values.image.clusterRepository }}"
              command: ['mkdir', '-p', '/mnt/output/home/{{ .Values.experimentName }}']
              volumeMounts:
                - name: output-home
                  mountPath: /mnt/output/home
      backoffLimit: 0
    PS:
      replicas: {{ .Values.pServersCount }}
      restartPolicy: Never
      backoffLimit: 0
      template:
        metadata:
          annotations:
            buildID: {{ .Values.buildID }}
          labels:
            app: {{ template "name" . }}
            release: {{ .Release.Name }}
            runName: {{ .Release.Name }}
        spec:
          schedulerName: kube-batch
          containers:
            - name: tensorflow
              image: "{{ .Values.image.clusterRepository }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["python"]
              args: [
                "main.py",
                {{ range .Values.commandline.args }}
                "{{.}}",
                {{ end }}
              ]
              ports:
                - containerPort: {{ .Values.TensorBoardPort }}
                  name: "tensorboard"
                - containerPort: {{ .Values.TensorIPythonPort }}
                  name: "ipython"
              volumeMounts:
                - name: input-home
                  mountPath: /mnt/input/home
                  readOnly: True
                - name: input-public
                  mountPath: /mnt/input/root
                  readOnly: True
                - name: output-home
                  mountPath: /mnt/output/home
                - name: output-public
                  mountPath: /mnt/output/root
                - name: output-home
                  mountPath: /mnt/output/experiment
                  subPath: {{ .Values.experimentName }}
                - name: shared-data
                  mountPath: /pod-data
              securityContext:
                privileged: true
              resources:
                requests:
                  cpu: {{ default .Values.ps_resources.requests.cpu .Values.ps_cpu}}
                  memory: {{ default .Values.ps_resources.requests.memory .Values.ps_memory }}
                limits:
                  cpu: {{ default .Values.ps_resources.limits.cpu .Values.ps_cpu }}
                  memory: {{ default .Values.ps_resources.limits.memory .Values.ps_memory }}
            - name: sidecar
              image: "127.0.0.1:{{ .Values.registryPort }}/nauta/tfjob-multinode-sidecar:1.0.0"
              imagePullPolicy: Always
              env:
                - name: MY_POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: LOGGING_LEVEL
                  value: {{ .Values.sidecarLoggingLevel }}
              volumeMounts:
                - name: shared-data
                  mountPath: /pod-data
              resources:
                requests:
                  cpu: {{ default .Values.sidecar_resources.requests.cpu .Values.sidecar_cpu }}
                  memory: {{ default .Values.sidecar_resources.requests.memory .Values.sidecar_memory }}
                limits:
                    cpu: {{ default .Values.sidecar_resources.limits.cpu .Values.sidecar_cpu }}
                    memory: {{ default .Values.sidecar_resources.limits.memory .Values.sidecar_memory }}
          volumes:
            - name: input-home
              persistentVolumeClaim:
                claimName: input-home
            - name: input-public
              persistentVolumeClaim:
                claimName: input-public
            - name: output-home
              persistentVolumeClaim:
                claimName: output-home
            - name: output-public
              persistentVolumeClaim:
                claimName: output-public
            - name: shared-data
              emptyDir: {}
          initContainers:
            - name: init-experiment-pod
              image: "{{ .Values.image.clusterRepository }}"
              command: ['mkdir', '-p', '/mnt/output/home/{{ .Values.experimentName }}']
              volumeMounts:
                - name: output-home
                  mountPath: /mnt/output/home
